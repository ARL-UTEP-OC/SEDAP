node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.1/32
	 ipv6 address a:0::1/128
	!
    }
    canvas c1
    iconcoords {224.0 113.0}
    labelcoords {224.0 145.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.0.2/32
	 ipv6 address a:0::2/128
	!
    }
    canvas c1
    iconcoords {364.0 58.0}
    labelcoords {364.0 90.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 10.0.0.3/32
	 ipv6 address a:0::3/128
	!
    }
    canvas c1
    iconcoords {503.0 72.0}
    labelcoords {503.0 104.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.0.4/32
	 ipv6 address a:0::4/128
	!
    }
    canvas c1
    iconcoords {622.0 161.0}
    labelcoords {622.0 193.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.0.5/32
	 ipv6 address a:0::5/128
	!
    }
    canvas c1
    iconcoords {685.0 269.0}
    labelcoords {685.0 301.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.0.6/32
	 ipv6 address a:0::6/128
	!
    }
    canvas c1
    iconcoords {638.0 393.0}
    labelcoords {638.0 425.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.0.7/32
	 ipv6 address a:0::7/128
	!
    }
    canvas c1
    iconcoords {552.0 466.0}
    labelcoords {552.0 498.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.0.8/32
	 ipv6 address a:0::8/128
	!
    }
    canvas c1
    iconcoords {436.0 446.0}
    labelcoords {436.0 478.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.0.9/32
	 ipv6 address a:0::9/128
	!
    }
    canvas c1
    iconcoords {329.0 392.0}
    labelcoords {329.0 424.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n10 {
    type router
    model router
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.0.10/32
	 ipv6 address a:0::10/128
	!
    }
    canvas c1
    iconcoords {233.0 268.0}
    labelcoords {233.0 300.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wireless/
fi
cd $SCRIPTDIR

mkdir 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*
cd 8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n8 -o 8 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
nodeToSpoof=$3
logPath=$4
ipToSpoof="10.0.0.$nodeToSpoof"

echo "none" > $logPath/attack.txt
sleep $startTime

if [ $pendingDuration -gt 0 ]
then
	echo "spoof_"$ipToSpoof > $logPath/attack.txt

	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up

	#check if its olsrd running:
	if [[ $logPath == *"OLSR"* ]]
	then
		echo "HNA $ipToSpoof 32" > $logPath/tmp.txt
		killall nrlolsrd
#		sleep 1
		ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
		nrlolsrd -i eth0 -hna $logPath/tmp.txt &
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		killall nrlolsrd
		ifconfig "eth0:1" down
		nrlolsrd -i eth0 &
	else
#		changed to allow the attack for duration regardless of start time
        sleep $pendingDuration
		ifconfig "eth0:1" down
	fi
fi

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 7 /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* 

else
	echo `hostname` >> /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wireless/8_60_60_spoofingAttack_sh7_cycle_OLSR_wireless* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OLSR_Mod IPForward UserDefined}
}

node n11 {
    type wlan
    network-config {
	hostname wlan11
	!
	interface wireless
	 ip address 10.0.1.0/24
	 ipv6 address a:1::0/64
	!
	scriptfile
	
	!
	mobmodel
	coreapi
	basic_range
	ns2script
	!
    }
    iconcoords {0 0}
    labelcoords {0 0}
    canvas c1
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n4}
    interface-peer {e4 n5}
    interface-peer {e5 n6}
    interface-peer {e6 n7}
    interface-peer {e7 n8}
    interface-peer {e8 n9}
    interface-peer {e9 n10}
	custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=176
	bandwidth=54000000
	jitter=0
	delay=50000
	error=0
	}
    }
    custom-config {
	custom-config-id ns2script
	custom-command {10 3 11 10 10 10 10 10}
    }
}

link l1 {
    nodes {n11 n1}
    bandwidth 54000000
    delay 20000
}

link l2 {
    nodes {n11 n2}
    bandwidth 54000000
    delay 20000
}

link l3 {
    nodes {n11 n3}
    bandwidth 54000000
    delay 20000
}

link l4 {
    nodes {n11 n4}
    bandwidth 54000000
    delay 20000
}

link l5 {
    nodes {n11 n5}
    bandwidth 54000000
    delay 20000
}

link l6 {
    nodes {n11 n6}
    bandwidth 54000000
    delay 20000
}

link l7 {
    nodes {n11 n7}
    bandwidth 54000000
    delay 20000
}

link l8 {
    nodes {n11 n8}
    bandwidth 54000000
    delay 20000
}

link l9 {
    nodes {n11 n9}
    bandwidth 54000000
    delay 20000
}

link l10 {
    nodes {n11 n10}
    bandwidth 54000000
    delay 20000
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    ipsec_configs yes
    remote_exec no
    exec_errors yes
    show_api no
    background_images no
    annotations yes
    grid no
}


