
node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.1/32
	 ipv6 address a:0::1/128
	!
    }
    iconcoords {224.0 113.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.0.2/32
	 ipv6 address a:0::2/128
	!
    }
    iconcoords {361.0 117.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 10.0.0.3/32
	 ipv6 address a:0::3/128
	!
    }
    iconcoords {505.0 114.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 10.0.0.4/32
	 ipv6 address a:0::4/128
	!
    }
    iconcoords {220.0 242.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 10.0.0.5/32
	 ipv6 address a:0::5/128
	!
    }
    iconcoords {364.0 243.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.0.6/32
	 ipv6 address a:0::6/128
	!
    }
    iconcoords {508.0 246.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 10.0.0.7/32
	 ipv6 address a:0::7/128
	!
    }
    iconcoords {218.0 392.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.0.8/32
	 ipv6 address a:0::8/128
	!
    }
    iconcoords {365.0 396.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.0.9/32
	 ipv6 address a:0::9/128
	!
    }
    iconcoords {510.0 405.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n10 {
    type router
    model router
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 10.0.0.10/32
	 ipv6 address a:0::10/128
	!
    }
    iconcoords {289.0 316.0
}
    labelcoords {196.387421 486.134022}
    canvas c1
    interface-peer {eth0 n11}

    custom-post-config-commands {
route add default dev eth0
route add -net 224.0.0.0 netmask 224.0.0.0 dev eth0
    
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/
fi
cd $SCRIPTDIR
mkdir 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
cd 6_60_60_downAttack_sh_conn_grid_scen_OSPFv3MDR_conn_grid_txt
    
#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1`
myIP="10.0.0.`expr substr $HN 2 $hostnameLen`"

#now insert attack script
if [ `hostname` = n6 -o 6 = 0 ]
then

#start logging
tshark -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/IntelAttacker/netCollect.py $myIP > $HN.capture &    

mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash

startTime=$1
duration=$2

echo "none" > /tmp/attack.txt
sleep $startTime
echo "down" > /tmp/attack.txt
ifconfig eth0 down
sleep $duration

ifconfig eth0 up
rm /tmp/attack.txt

EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60  
else
	echo `hostname` >> /tmp/check.txt
	mgen flush input /root/IntelAttacker/flowGenerator/flows/flow`hostname`.mgn | /root/IntelAttacker/mgenCollect.py > `hostname`.mgencapture &
fi
    }
    services {OSPFv3MDR zebra vtysh  IPForward}
    
}

node n11 {
    type wlan
    network-config {
	hostname wlan11
	!
	interface wireless
	 ip address 10.0.1.0/24
	 ipv6 address a:1::0/64
	!
	scriptfile
	/root/IntelAttacker/staticScenarios/conn_grid.scen
	!
	mobmodel
	coreapi
	basic_range
	ns2script
	!
    }
    iconcoords {0 0}
    labelcoords {0 0}
    canvas c1
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n4}
    interface-peer {e4 n5}
    interface-peer {e5 n6}
    interface-peer {e6 n7}
    interface-peer {e7 n8}
    interface-peer {e8 n9}
    interface-peer {e9 n10}
	custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=176
	bandwidth=54000000
	jitter=0
	delay=50000
	error=0
	}
    }
    custom-config {
	custom-config-id ns2script
	custom-command {10 3 11 10 10 10 10 10}
	config {
	file=/root/IntelAttacker/staticScenarios/conn_grid.scen
	refresh_ms=50
	loop=0
	autostart=1.0
	map=
	script_start=
	script_pause=
	script_stop=
	}
    }
}

link l1 {
    nodes {n11 n1}
    bandwidth 54000000
    delay 50000
}

link l2 {
    nodes {n11 n2}
    bandwidth 54000000
    delay 50000
}

link l3 {
    nodes {n11 n3}
    bandwidth 54000000
    delay 50000
}

link l4 {
    nodes {n11 n4}
    bandwidth 54000000
    delay 50000
}

link l5 {
    nodes {n11 n5}
    bandwidth 54000000
    delay 50000
}

link l6 {
    nodes {n11 n6}
    bandwidth 54000000
    delay 50000
}

link l7 {
    nodes {n11 n7}
    bandwidth 54000000
    delay 50000
}

link l8 {
    nodes {n11 n8}
    bandwidth 54000000
    delay 50000
}

link l9 {
    nodes {n11 n9}
    bandwidth 54000000
    delay 50000
}

link l10 {
    nodes {n11 n10}
    bandwidth 54000000
    delay 50000
}

canvas c1 {
    name {Canvas1}
    wallpaper-style {upperleft}
    wallpaper {sample4-bg.jpg}
    size {1000 750}
}


option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    ipsec_configs yes
    remote_exec no
    exec_errors yes
    show_api no
    background_images no
    annotations yes
    grid no
}

