node n1 {
    type router
    model host
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 11.0.0.2/24
	!
    }
    canvas c1
    iconcoords {230.0 31.0}
    labelcoords {230.0 63.0}
    interface-peer {eth0 n11}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n2 {
    type router
    model host
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 12.0.0.2/24
	!
    }
    canvas c1
    iconcoords {478.0 34.0}
    labelcoords {478.0 66.0}
    interface-peer {eth0 n12}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n3 {
    type router
    model host
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 13.0.0.2/24
	!
    }
    canvas c1
    iconcoords {715.0 40.0}
    labelcoords {715.0 72.0}
    interface-peer {eth0 n13}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n4 {
    type router
    model host
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 14.0.0.2/24
	!
    }
    canvas c1
    iconcoords {67.0 315.0}
    labelcoords {67.0 347.0}
    interface-peer {eth0 n14}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n5 {
    type router
    model host
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 15.0.0.2/24
	!
    }
    canvas c1
    iconcoords {379.0 241.0}
    labelcoords {379.0 273.0}
    interface-peer {eth0 n15}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n6 {
    type router
    model host
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 16.0.0.2/24
	!
    }
    canvas c1
    iconcoords {880.0 331.0}
    labelcoords {880.0 363.0}
    interface-peer {eth0 n16}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n7 {
    type router
    model host
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 17.0.0.2/24
	!
    }
    canvas c1
    iconcoords {868.0 584.0}
    labelcoords {868.0 616.0}
    interface-peer {eth0 n17}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n8 {
    type router
    model host
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 18.0.0.2/24
	!
    }
    canvas c1
    iconcoords {471.0 691.0}
    labelcoords {471.0 723.0}
    interface-peer {eth0 n18}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n9 {
    type router

	model router    network-config {
	hostname n9
	!
	interface eth0
	 ip address 19.0.0.2/24
	!
    }
    canvas c1
    iconcoords {107.0 650.0}
    labelcoords {107.0 682.0}
    interface-peer {eth0 n19}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#stop quagga
#killall vtysh
#killall ospfd
#killall zebra

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n10 {
    type router
    model host
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 20.0.0.2/24
	!
    }
    canvas c1
    iconcoords {580.0 490.0}
    labelcoords {580.0 522.0}
    interface-peer {eth0 n20}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

mkdir 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*
cd 9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*

#get ip of current
hostnameLen=`expr length $HN`
hostnameLen=`expr $hostnameLen - 1` 
myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 

#now insert attack script and mgen flush if node is attacker
if [ `hostname` = n9 -o 9 = 0 ]
then

#start logging
tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* $myIP > $HN.capture &    

mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &

(
cat << 'EOF'
#!/bin/bash 
startTime=$1
pendingDuration=$2
# Node is incremented by 10 based on scenario IP configuration
nodeToSpoof=`expr $3 + 10`
logPath=$4

# Parse routing protocol and convert to lowercase
routingProtocol=`echo $logPath | cut -d'_' -f7 | cut -d 'v' -f1 | sed 's/./\L&/g'`
subnet=`echo $logPath | cut -d '_' -f9 | cut -d'*' -f1`

cd "$SESSION_DIR/$NODE_NAME.conf"

echo "none" > $logPath/attack.txt
echo "sleep startime:" "$startTime"
sleep $startTime

#check for protocol
#if [[ $routingProtocol == *"ospf"* && -n "$5" && "IPv6" -eq "$5" ]]
#then
#	protocol="IPv6"
#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
#else
protocol="IPv4" 
ipToSpoof="$nodeToSpoof.0.0.2"

cd "$SESSION_DIR/$NODE_NAME.conf"

sh quaggaboot.sh zebra
sh quaggaboot.sh "$routingProtocol"d
sh quaggaboot.sh vtysh

echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
ifconfig eth0:1 $ipToSpoof netmask 255.255.255.$subnet up
#fi
echo "$protocol" ":" "$ipToSpoof"
echo "starting spoof"
echo "spoof_"$ipToSpoof > $logPath/attack.txt

# Now check the routing protocol running  
cd var.run.quagga/
routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
if [ "$routingProcotolsRunning" -ne 1 ]
then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
fi

#if ospf is used
if [[ $routingProtocol == *"ospf"* ]]
then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
fi

# attack duration
sleep $pendingDuration
#stop quagga
killall vtysh
killall "$routingProtocol"d
killall zebra

ifconfig "eth0:1" down
echo "eth0:1 down"

echo "none" > $logPath/attack.txt



EOF
) > attack.sh

chmod 755 attack.sh

./attack.sh 60 60 8 /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* 

else
	echo `hostname` >> /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/9_60_60_spoofingAttack_sh8_conn-grid_OSPFv2_wired_128* > `hostname`.mgencapture &
fi

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {DefaultRoute SSH UserDefined}
}

node n11 {
    type router
    model router
    network-config {
	hostname n11
	!
	interface eth2
	 ip address 11.0.0.1/24
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {233.0 120.0}
    labelcoords {233.0 152.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n14}
    interface-peer {eth2 n1}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n12 {
    type router
    model router
    network-config {
	hostname n12
	!
	interface eth3
	 ip address 12.0.0.1/24
	!
	interface eth2
	 ip address 10.0.9.1/24
	!
	interface eth1
	 ip address 10.0.1.1/24
	!
	interface eth0
	 ip address 10.0.0.2/24
	!
    }
    canvas c1
    iconcoords {481.0 122.0}
    labelcoords {481.0 154.0}
    interface-peer {eth0 n11}
    interface-peer {eth1 n13}
    interface-peer {eth2 n15}
    interface-peer {eth3 n2}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n13 {
    type router
    model router
    network-config {
	hostname n13
	!
	interface eth2
	 ip address 13.0.0.1/24
	!
	interface eth1
	 ip address 10.0.10.1/24
	!
	interface eth0
	 ip address 10.0.1.2/24
	!
    }
    canvas c1
    iconcoords {718.0 123.0}
    labelcoords {718.0 155.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n16}
    interface-peer {eth2 n3}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n14 {
    type router
    model router
    network-config {
	hostname n14
	!
	interface eth4
	 ip address 14.0.0.1/24
	!
	interface eth3
	 ip address 10.0.12.1/24
	!
	interface eth2
	 ip address 10.0.11.1/24
	!
	interface eth1
	 ip address 10.0.3.1/24
	!
	interface eth0
	 ip address 10.0.2.2/24
	!
    }
    canvas c1
    iconcoords {234.0 352.0}
    labelcoords {234.0 384.0}
    interface-peer {eth0 n11}
    interface-peer {eth1 n15}
    interface-peer {eth2 n19}
    interface-peer {eth3 n20}
    interface-peer {eth4 n4}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n15 {
    type router
    model router
    network-config {
	hostname n15
	!
	interface eth5
	 ip address 15.0.0.1/24
	!
	interface eth4
	 ip address 10.0.14.1/24
	!
	interface eth3
	 ip address 10.0.13.1/24
	!
	interface eth2
	 ip address 10.0.9.2/24
	!
	interface eth1
	 ip address 10.0.4.1/24
	!
	interface eth0
	 ip address 10.0.3.2/24
	!
    }
    canvas c1
    iconcoords {496.0 353.0}
    labelcoords {496.0 385.0}
    interface-peer {eth0 n14}
    interface-peer {eth1 n16}
    interface-peer {eth2 n12}
    interface-peer {eth3 n18}
    interface-peer {eth4 n20}
    interface-peer {eth5 n5}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n16 {
    type router
    model router
    network-config {
	hostname n16
	!
	interface eth3
	 ip address 16.0.0.1/24
	!
	interface eth2
	 ip address 10.0.10.2/24
	!
	interface eth1
	 ip address 10.0.5.1/24
	!
	interface eth0
	 ip address 10.0.4.2/24
	!
    }
    canvas c1
    iconcoords {717.0 366.0}
    labelcoords {717.0 398.0}
    interface-peer {eth0 n15}
    interface-peer {eth1 n17}
    interface-peer {eth2 n13}
    interface-peer {eth3 n6}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n17 {
    type router
    model router
    network-config {
	hostname n17
	!
	interface eth2
	 ip address 17.0.0.1/24
	!
	interface eth1
	 ip address 10.0.6.1/24
	!
	interface eth0
	 ip address 10.0.5.2/24
	!
    }
    canvas c1
    iconcoords {716.0 611.0}
    labelcoords {716.0 643.0}
    interface-peer {eth0 n16}
    interface-peer {eth1 n18}
    interface-peer {eth2 n7}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n18 {
    type router
    model router
    network-config {
	hostname n18
	!
	interface eth4
	 ip address 18.0.0.1/24
	!
	interface eth3
	 ip address 10.0.15.1/24
	!
	interface eth2
	 ip address 10.0.13.2/24
	!
	interface eth1
	 ip address 10.0.7.1/24
	!
	interface eth0
	 ip address 10.0.6.2/24
	!
    }
    canvas c1
    iconcoords {469.0 608.0}
    labelcoords {469.0 640.0}
    interface-peer {eth0 n17}
    interface-peer {eth1 n19}
    interface-peer {eth2 n15}
    interface-peer {eth3 n20}
    interface-peer {eth4 n8}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n19 {
    type router
    model router
    network-config {
	hostname n19
	!
	interface eth3
	 ip address 19.0.0.1/24
	!
	interface eth2
	 ip address 10.0.11.2/24
	!
	interface eth1
	 ip address 10.0.8.1/24
	!
	interface eth0
	 ip address 10.0.7.2/24
	!
    }
    canvas c1
    iconcoords {235.0 605.0}
    labelcoords {235.0 637.0}
    interface-peer {eth0 n18}
    interface-peer {eth1 n20}
    interface-peer {eth2 n14}
    interface-peer {eth3 n9}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

node n20 {
    type router
    model router
    network-config {
	hostname n20
	!
	interface eth4
	 ip address 20.0.0.1/24
	!
	interface eth3
	 ip address 10.0.15.2/24
	!
	interface eth2
	 ip address 10.0.14.2/24
	!
	interface eth1
	 ip address 10.0.12.2/24
	!
	interface eth0
	 ip address 10.0.8.2/24
	!
    }
    canvas c1
    iconcoords {361.0 521.0}
    labelcoords {361.0 553.0}
    interface-peer {eth0 n19}
    interface-peer {eth1 n14}
    interface-peer {eth2 n15}
    interface-peer {eth3 n18}
    interface-peer {eth4 n10}
    custom-config {

	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
#!/bin/sh
HN=`hostname`
if [ `uname` = "FreeBSD" ]; then
  SCRIPTDIR=/tmp/e0_$HN
else SCRIPTDIR=/root/wired/
fi
cd $SCRIPTDIR

	}
	}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }

	services {OSPFv2 zebra vtysh IPForward UserDefined}
}

link l1 {
    nodes {n11 n12}
    bandwidth 0
}

link l2 {
    nodes {n12 n13}
    bandwidth 0
}

link l3 {
    nodes {n11 n14}
    bandwidth 0
}

link l4 {
    nodes {n14 n15}
    bandwidth 0
}

link l5 {
    nodes {n15 n16}
    bandwidth 0
}

link l6 {
    nodes {n16 n17}
    bandwidth 0
}

link l7 {
    nodes {n17 n18}
    bandwidth 0
}

link l8 {
    nodes {n18 n19}
    bandwidth 0
}

link l9 {
    nodes {n19 n20}
    bandwidth 0
}

link l10 {
    nodes {n12 n15}
    bandwidth 0
}

link l11 {
    nodes {n13 n16}
    bandwidth 0
}

link l12 {
    nodes {n14 n19}
    bandwidth 0
}

link l13 {
    nodes {n14 n20}
    bandwidth 0
}

link l14 {
    nodes {n15 n18}
    bandwidth 0
}

link l15 {
    nodes {n15 n20}
    bandwidth 0
}

link l16 {
    nodes {n18 n20}
    bandwidth 0
}

link l17 {
    nodes {n11 n1}
    bandwidth 0
}

link l18 {
    nodes {n12 n2}
    bandwidth 0
}

link l19 {
    nodes {n13 n3}
    bandwidth 0
}

link l20 {
    nodes {n16 n6}
    bandwidth 0
}

link l21 {
    nodes {n17 n7}
    bandwidth 0
}

link l22 {
    nodes {n18 n8}
    bandwidth 0
}

link l23 {
    nodes {n19 n9}
    bandwidth 0
}

link l24 {
    nodes {n14 n4}
    bandwidth 0
}

link l25 {
    nodes {n15 n5}
    bandwidth 0
}

link l26 {
    nodes {n20 n10}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}


