node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 11.0.0.2/24
	!
    }
    canvas c1
    iconcoords {193.0 46.0}
    labelcoords {193.0 78.0}
    interface-peer {eth0 n11}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#stop quagga
	#killall vtysh
	#killall ospfd
	#killall zebra
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {vtysh DefaultRoute SSH UserDefined}
    custom-image /usr/local/share/core/icons/normal/host.gif
}

node n2 {
    type router
    model host
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 12.0.0.2/24
	!
    }
    canvas c1
    iconcoords {729.0 59.0}
    labelcoords {729.0 91.0}
    interface-peer {eth0 n12}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n3 {
    type router
    model host
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 13.0.0.2/24
	!
    }
    canvas c1
    iconcoords {946.0 190.0}
    labelcoords {946.0 222.0}
    interface-peer {eth0 n13}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n4 {
    type router
    model host
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 14.0.0.2/24
	!
    }
    canvas c1
    iconcoords {919.0 492.0}
    labelcoords {919.0 524.0}
    interface-peer {eth0 n14}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n5 {
    type router
    model host
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 15.0.0.2/24
	!
    }
    canvas c1
    iconcoords {669.0 586.0}
    labelcoords {669.0 618.0}
    interface-peer {eth0 n15}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n6 {
    type router
    model host
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 16.0.0.2/24
	!
    }
    canvas c1
    iconcoords {392.0 587.0}
    labelcoords {392.0 619.0}
    interface-peer {eth0 n16}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n7 {
    type router
    model host
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 17.0.0.2/24
	!
    }
    canvas c1
    iconcoords {139.0 516.0}
    labelcoords {139.0 548.0}
    interface-peer {eth0 n17}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n8 {
    type router
    model host
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 18.0.0.2/24
	!
    }
    canvas c1
    iconcoords {62.0 119.0}
    labelcoords {62.0 151.0}
    interface-peer {eth0 n18}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n9 {
    type router
    model host
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 19.0.0.2/24
	!
    }
    canvas c1
    iconcoords {466.0 363.0}
    labelcoords {466.0 395.0}
    interface-peer {eth0 n19}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n10 {
    type router
    model host
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 20.0.0.2/24
	!
    }
    canvas c1
    iconcoords {437.0 224.0}
    labelcoords {437.0 256.0}
    interface-peer {eth0 n20}
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	mkdir 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	cd 1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*
	
	#get ip of current
	hostnameLen=`expr length $HN`
	hostnameLen=`expr $hostnameLen - 1` 
	myIP="`expr substr $HN 2 $hostnameLen`.0.0.1" 
	
	#now insert attack script and mgen flush if node is attacker
	if [ `hostname` = n1 -o 1 = 0 ]
	then
	
	#start logging
	tshark -a duration:175 -nli eth0 -T fields -E separator=, -e frame.time_epoch -e frame.len -e frame.protocols -e ip.src -e ip.dst -e ipv6.src -e ipv6.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport | /root/install/impactpredictionmodels_b1/impactpredictionmodels/netCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* $myIP > $HN.capture &    
	
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn output /dev/null &
	
	(
	cat << 'EOF'
	#!/bin/bash 
	startTime=$1
	pendingDuration=$2
	# Node is incremented by 10 based on scenario IP configuration
	nodeToSpoof=`expr $3 + 10`
	logPath=$4
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	echo "none" > $logPath/attack.txt
	echo "sleep startime:" "$startTime"
	sleep $startTime
	
	#check for protocol
	#if [[ -n "$5" && "IPv6" -eq "$5" ]]
	#then
	#	protocol="IPv6"
	#	ipToSpoof="2001:""$nodeToSpoof""::1"	
	#start ospfv3
	##????
	#	ifconfig eth0:1 inet6 add "$ipToSpoof/120" up
	#else
	protocol="IPv4" 
	ipToSpoof="$nodeToSpoof.0.0.2"
	
	cd "$SESSION_DIR/$NODE_NAME.conf"
	
	sh quaggaboot.sh zebra
	sh quaggaboot.sh ospfd
	sh quaggaboot.sh vtysh
	
	echo ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	ifconfig eth0:1 $ipToSpoof netmask 255.255.255.255 up
	#fi
	echo "$protocol" ":" "$ipToSpoof"
	echo "starting spoof"
	echo "spoof_"$ipToSpoof > $logPath/attack.txt
	
	# Now check the routing protocol running  
	cd var.run.quagga/
	routingProcotolsRunning=`ls -1 | grep -v zebra.pid | grep pid | wc -l`	
	if [ "$routingProcotolsRunning" -ne 1 ]
	then
	echo "spoof_"$ipToSpoof "Error: Multiple Routing Procols Running -> $routingProcotolsRunning" > $logPath/attack.txt	
	echo "Multiple routing protocols"
	exit
	fi
	#if ospf used in log path
	if [[ $logPath == *"OSPF"* ]]
	then
	vtysh <<< $'configure terminal \n router ospf \n redistribute connected'
	echo "sent vtysh cmd"
	fi
	
	# attack duration
	sleep $pendingDuration
	#stop quagga
	killall vtysh
	killall ospfd
	killall zebra
	
	ifconfig "eth0:1" down
	echo "eth0:1 down"
	
	echo "none" > $logPath/attack.txt
	
	
	
	EOF
	) > attack.sh
	
	chmod 755 attack.sh
	
	./attack.sh 60 60 10 /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* 
	
	else
	echo `hostname` >> /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired*/check.txt
	mgen flush input /root/install/impactpredictionmodels_b1/impactpredictionmodels/flowGenerator/flows/flow`hostname`.mgn | /root/install/impactpredictionmodels_b1/impactpredictionmodels/mgenCollect.py /root/wired/1_60_60_spoofingAttack_sh10_star_OSPFv2_wired* > `hostname`.mgencapture &
	fi
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n11 {
    type router
    model router
    network-config {
	hostname n11
	!
	interface eth3
	 ip address 11.0.0.1/24
	!
	interface eth2
	 ip address 10.0.8.1/24
	!
	interface eth1
	 ip address 10.0.7.2/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {324.0 80.0}
    labelcoords {324.0 112.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n18}
    interface-peer {eth2 n19}
    interface-peer {eth3 n1}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.0.1/24
	  
	!
	interface eth1
	  ip address 10.0.7.2/24
	  
	!
	interface eth2
	  ip address 10.0.8.1/24
	  
	!
	interface eth3
	  ip address 11.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 11
	  bgp router-id 10.0.0.1
	  redistribute connected
	  neighbor 10.0.0.2 remote-as 12
	  neighbor 10.0.0.2 next-hop-self
	  neighbor 10.0.8.2 remote-as 19
	  neighbor 10.0.8.2 next-hop-self
	  neighbor 10.0.7.1 remote-as 18
	  neighbor 10.0.7.1 next-hop-self
	  network 11.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n12 {
    type router
    model router
    network-config {
	hostname n12
	!
	interface eth3
	 ip address 12.0.0.1/24
	!
	interface eth2
	 ip address 10.0.12.1/24
	!
	interface eth1
	 ip address 10.0.1.1/24
	!
	interface eth0
	 ip address 10.0.0.2/24
	!
    }
    canvas c1
    iconcoords {614.0 103.0}
    labelcoords {614.0 135.0}
    interface-peer {eth0 n11}
    interface-peer {eth1 n13}
    interface-peer {eth2 n20}
    interface-peer {eth3 n2}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.0.2/24
	  
	!
	interface eth1
	  ip address 10.0.1.1/24
	  
	!
	interface eth2
	  ip address 10.0.12.1/24
	  
	!
	interface eth3
	  ip address 12.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 12
	  bgp router-id 10.0.0.2
	  redistribute connected
	  neighbor 10.0.0.1 remote-as 11
	  neighbor 10.0.0.1 next-hop-self
	  neighbor 10.0.12.2 remote-as 20
	  neighbor 10.0.12.2 next-hop-self
	  neighbor 10.0.1.2 remote-as 13
	  neighbor 10.0.1.2 next-hop-self
	  network 12.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n13 {
    type router
    model router
    network-config {
	hostname n13
	!
	interface eth4
	 ip address 13.0.0.1/24
	!
	interface eth3
	 ip address 10.0.17.2/24
	!
	interface eth2
	 ip address 10.0.13.1/24
	!
	interface eth1
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.1.2/24
	!
    }
    canvas c1
    iconcoords {780.0 280.0}
    labelcoords {780.0 312.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n14}
    interface-peer {eth2 n20}
    interface-peer {eth3 n15}
    interface-peer {eth4 n3}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.1.2/24
	  
	!
	interface eth1
	  ip address 10.0.2.1/24
	  
	!
	interface eth2
	  ip address 10.0.13.1/24
	  
	!
	interface eth3
	  ip address 10.0.17.2/24
	  
	!
	interface eth4
	  ip address 13.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 13
	  bgp router-id 10.0.1.2
	  redistribute connected
	  neighbor 10.0.1.1 remote-as 12
	  neighbor 10.0.1.1 next-hop-self
	  neighbor 10.0.13.2 remote-as 20
	  neighbor 10.0.13.2 next-hop-self
	  neighbor 10.0.17.1 remote-as 15
	  neighbor 10.0.17.1 next-hop-self
	  neighbor 10.0.2.2 remote-as 14
	  neighbor 10.0.2.2 next-hop-self
	  network 13.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n14 {
    type router
    model router
    network-config {
	hostname n14
	!
	interface eth2
	 ip address 14.0.0.1/24
	!
	interface eth1
	 ip address 10.0.3.1/24
	!
	interface eth0
	 ip address 10.0.2.2/24
	!
    }
    canvas c1
    iconcoords {931.0 409.0}
    labelcoords {931.0 441.0}
    interface-peer {eth0 n13}
    interface-peer {eth1 n15}
    interface-peer {eth2 n4}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.2.2/24
	  
	!
	interface eth1
	  ip address 10.0.3.1/24
	  
	!
	interface eth2
	  ip address 14.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 14
	  bgp router-id 10.0.2.2
	  redistribute connected
	  neighbor 10.0.2.1 remote-as 13
	  neighbor 10.0.2.1 next-hop-self
	  neighbor 10.0.3.2 remote-as 15
	  neighbor 10.0.3.2 next-hop-self
	  network 14.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n15 {
    type router
    model router
    network-config {
	hostname n15
	!
	interface eth4
	 ip address 15.0.0.1/24
	!
	interface eth3
	 ip address 10.0.17.1/24
	!
	interface eth2
	 ip address 10.0.14.2/24
	!
	interface eth1
	 ip address 10.0.4.1/24
	!
	interface eth0
	 ip address 10.0.3.2/24
	!
    }
    canvas c1
    iconcoords {656.0 503.0}
    labelcoords {656.0 535.0}
    interface-peer {eth0 n14}
    interface-peer {eth1 n16}
    interface-peer {eth2 n20}
    interface-peer {eth3 n13}
    interface-peer {eth4 n5}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.3.2/24
	  
	!
	interface eth1
	  ip address 10.0.4.1/24
	  
	!
	interface eth2
	  ip address 10.0.14.2/24
	  
	!
	interface eth3
	  ip address 10.0.17.1/24
	  
	!
	interface eth4
	  ip address 15.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 15
	  bgp router-id 10.0.3.2
	  redistribute connected
	  neighbor 10.0.4.2 remote-as 16
	  neighbor 10.0.4.2 next-hop-self
	  neighbor 10.0.14.1 remote-as 20
	  neighbor 10.0.14.1 next-hop-self
	  neighbor 10.0.17.2 remote-as 13
	  neighbor 10.0.17.2 next-hop-self
	  neighbor 10.0.3.1 remote-as 14
	  neighbor 10.0.3.1 next-hop-self
	  network 15.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n16 {
    type router
    model router
    network-config {
	hostname n16
	!
	interface eth4
	 ip address 16.0.0.1/24
	!
	interface eth3
	 ip address 10.0.15.2/24
	!
	interface eth2
	 ip address 10.0.9.1/24
	!
	interface eth1
	 ip address 10.0.5.1/24
	!
	interface eth0
	 ip address 10.0.4.2/24
	!
    }
    canvas c1
    iconcoords {399.0 507.0}
    labelcoords {398.0 541.0}
    interface-peer {eth0 n15}
    interface-peer {eth1 n17}
    interface-peer {eth2 n19}
    interface-peer {eth3 n20}
    interface-peer {eth4 n6}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.4.2/24
	  
	!
	interface eth1
	  ip address 10.0.5.1/24
	  
	!
	interface eth2
	  ip address 10.0.9.1/24
	  
	!
	interface eth3
	  ip address 10.0.15.2/24
	  
	!
	interface eth4
	  ip address 16.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 16
	  bgp router-id 10.0.4.2
	  redistribute connected
	  neighbor 10.0.5.2 remote-as 17
	  neighbor 10.0.5.2 next-hop-self
	  neighbor 10.0.9.2 remote-as 19
	  neighbor 10.0.9.2 next-hop-self
	  neighbor 10.0.15.1 remote-as 20
	  neighbor 10.0.15.1 next-hop-self
	  neighbor 10.0.4.1 remote-as 15
	  neighbor 10.0.4.1 next-hop-self
	  network 16.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n17 {
    type router
    model router
    network-config {
	hostname n17
	!
	interface eth3
	 ip address 17.0.0.1/24
	!
	interface eth2
	 ip address 10.0.10.1/24
	!
	interface eth1
	 ip address 10.0.6.1/24
	!
	interface eth0
	 ip address 10.0.5.2/24
	!
    }
    canvas c1
    iconcoords {143.0 436.0}
    labelcoords {143.0 468.0}
    interface-peer {eth0 n16}
    interface-peer {eth1 n18}
    interface-peer {eth2 n19}
    interface-peer {eth3 n7}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.5.2/24
	  
	!
	interface eth1
	  ip address 10.0.6.1/24
	  
	!
	interface eth2
	  ip address 10.0.10.1/24
	  
	!
	interface eth3
	  ip address 17.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 17
	  bgp router-id 10.0.5.2
	  redistribute connected
	  neighbor 10.0.6.2 remote-as 18
	  neighbor 10.0.6.2 next-hop-self
	  neighbor 10.0.10.2 remote-as 19
	  neighbor 10.0.10.2 next-hop-self
	  neighbor 10.0.5.1 remote-as 16
	  neighbor 10.0.5.1 next-hop-self
	  network 17.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n18 {
    type router
    model router
    network-config {
	hostname n18
	!
	interface eth3
	 ip address 18.0.0.1/24
	!
	interface eth2
	 ip address 10.0.11.1/24
	!
	interface eth1
	 ip address 10.0.7.1/24
	!
	interface eth0
	 ip address 10.0.6.2/24
	!
    }
    canvas c1
    iconcoords {57.0 239.0}
    labelcoords {57.0 271.0}
    interface-peer {eth0 n17}
    interface-peer {eth1 n11}
    interface-peer {eth2 n19}
    interface-peer {eth3 n8}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.6.2/24
	  
	!
	interface eth1
	  ip address 10.0.7.1/24
	  
	!
	interface eth2
	  ip address 10.0.11.1/24
	  
	!
	interface eth3
	  ip address 18.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 18
	  bgp router-id 10.0.6.2
	  redistribute connected
	  neighbor 10.0.7.2 remote-as 11
	  neighbor 10.0.7.2 next-hop-self
	  neighbor 10.0.11.2 remote-as 19
	  neighbor 10.0.11.2 next-hop-self
	  neighbor 10.0.6.1 remote-as 17
	  neighbor 10.0.6.1 next-hop-self
	  network 18.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n19 {
    type router
    model router
    network-config {
	hostname n19
	!
	interface eth5
	 ip address 19.0.0.1/24
	!
	interface eth4
	 ip address 10.0.16.2/24
	!
	interface eth3
	 ip address 10.0.11.2/24
	!
	interface eth2
	 ip address 10.0.10.2/24
	!
	interface eth1
	 ip address 10.0.9.2/24
	!
	interface eth0
	 ip address 10.0.8.2/24
	!
    }
    canvas c1
    iconcoords {337.0 277.0}
    labelcoords {337.0 309.0}
    interface-peer {eth0 n11}
    interface-peer {eth1 n16}
    interface-peer {eth2 n17}
    interface-peer {eth3 n18}
    interface-peer {eth4 n20}
    interface-peer {eth5 n9}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.8.2/24
	  
	!
	interface eth1
	  ip address 10.0.9.2/24
	  
	!
	interface eth2
	  ip address 10.0.10.2/24
	  
	!
	interface eth3
	  ip address 10.0.11.2/24
	  
	!
	interface eth4
	  ip address 10.0.16.2/24
	  
	!
	interface eth5
	  ip address 19.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 19
	  bgp router-id 10.0.8.2
	  redistribute connected
	  neighbor 10.0.8.1 remote-as 11
	  neighbor 10.0.8.1 next-hop-self
	  neighbor 10.0.16.1 remote-as 20
	  neighbor 10.0.16.1 next-hop-self
	  neighbor 10.0.9.1 remote-as 16
	  neighbor 10.0.9.1 next-hop-self
	  neighbor 10.0.10.1 remote-as 17
	  neighbor 10.0.10.1 next-hop-self
	  neighbor 10.0.11.1 remote-as 18
	  neighbor 10.0.11.1 next-hop-self
	  network 19.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

node n20 {
    type router
    model router
    network-config {
	hostname n20
	!
	interface eth5
	 ip address 20.0.0.1/24
	!
	interface eth4
	 ip address 10.0.16.1/24
	!
	interface eth3
	 ip address 10.0.15.1/24
	!
	interface eth2
	 ip address 10.0.14.1/24
	!
	interface eth1
	 ip address 10.0.13.2/24
	!
	interface eth0
	 ip address 10.0.12.2/24
	!
    }
    canvas c1
    iconcoords {575.0 297.0}
    labelcoords {575.0 329.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n13}
    interface-peer {eth2 n15}
    interface-peer {eth3 n16}
    interface-peer {eth4 n19}
    interface-peer {eth5 n10}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.12.2/24
	  
	!
	interface eth1
	  ip address 10.0.13.2/24
	  
	!
	interface eth2
	  ip address 10.0.14.1/24
	  
	!
	interface eth3
	  ip address 10.0.15.1/24
	  
	!
	interface eth4
	  ip address 10.0.16.1/24
	  
	!
	interface eth5
	  ip address 20.0.0.1/24
	  
	!
	!
	! BGP configuration
	!
	! You should configure the AS number below,
	! along with this router's peers.
	!
	router bgp 20
	  bgp router-id 10.0.12.2
	  redistribute connected
	  neighbor 10.0.16.2 remote-as 19
	  neighbor 10.0.16.2 next-hop-self
	  neighbor 10.0.13.1 remote-as 13
	  neighbor 10.0.13.1 next-hop-self
	  neighbor 10.0.12.1 remote-as 12
	  neighbor 10.0.12.1 next-hop-self
	  neighbor 10.0.14.2 remote-as 15
	  neighbor 10.0.14.2 next-hop-self
	  neighbor 10.0.15.2 remote-as 16
	  neighbor 10.0.15.2 next-hop-self
	  network 20.0.0.0 mask 255.255.255.0
	! neighbor 1.2.3.4 remote-as 555
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:custom-post-config-commands.sh
	custom-command custom-post-config-commands.sh
	config {
	#!/bin/sh
	HN=`hostname`
	if [ `uname` = "FreeBSD" ]; then
	  SCRIPTDIR=/tmp/e0_$HN
	else SCRIPTDIR=/root/wired/
	fi
	cd $SCRIPTDIR
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('custom-post-config-commands.sh', )
	startidx=120
	cmdup=('sh custom-post-config-commands.sh', )
	}
    }
    services {zebra BGP vtysh IPForward UserDefined}
}

link l1 {
    nodes {n11 n12}
    bandwidth 0
}

link l2 {
    nodes {n12 n13}
    bandwidth 0
}

link l3 {
    nodes {n13 n14}
    bandwidth 0
}

link l4 {
    nodes {n14 n15}
    bandwidth 0
}

link l5 {
    nodes {n15 n16}
    bandwidth 0
}

link l6 {
    nodes {n16 n17}
    bandwidth 0
}

link l7 {
    nodes {n17 n18}
    bandwidth 0
}

link l8 {
    nodes {n18 n11}
    bandwidth 0
}

link l9 {
    nodes {n11 n19}
    bandwidth 0
}

link l10 {
    nodes {n16 n19}
    bandwidth 0
}

link l11 {
    nodes {n17 n19}
    bandwidth 0
}

link l12 {
    nodes {n18 n19}
    bandwidth 0
}

link l13 {
    nodes {n12 n20}
    bandwidth 0
}

link l14 {
    nodes {n13 n20}
    bandwidth 0
}

link l15 {
    nodes {n20 n15}
    bandwidth 0
}

link l16 {
    nodes {n20 n16}
    bandwidth 0
}

link l17 {
    nodes {n20 n19}
    bandwidth 0
}

link l18 {
    nodes {n15 n13}
    bandwidth 0
}

link l19 {
    nodes {n11 n1}
    bandwidth 0
}

link l20 {
    nodes {n12 n2}
    bandwidth 0
}

link l21 {
    nodes {n13 n3}
    bandwidth 0
}

link l22 {
    nodes {n14 n4}
    bandwidth 0
}

link l23 {
    nodes {n15 n5}
    bandwidth 0
}

link l24 {
    nodes {n16 n6}
    bandwidth 0
}

link l25 {
    nodes {n17 n7}
    bandwidth 0
}

link l26 {
    nodes {n18 n8}
    bandwidth 0
}

link l27 {
    nodes {n19 n9}
    bandwidth 0
}

link l28 {
    nodes {n20 n10}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

