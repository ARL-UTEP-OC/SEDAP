#!/usr/bin/python
import time
import thread
import sys
import commands
import ast

inputFileName = sys.argv[1]
protocol = sys.argv[2]
scenFile = sys.argv[3]

arffFile = open(inputFileName)

conflictConfigs = {}

lines = arffFile.readlines()[28:]

uniques = {}
lineNum=28
for line in lines:
    lineNum+=1
    #print "processing line: ",lineNum,line
    #if lineNum > 49:
#        break
    if not line.strip():
        continue
    params = line.split(",")

    #need from,to,type,dist,passthrough,srcIsSpoofed,destIsSpoofed,duringLinkLost,attackName
    #2,3,4,5,6,19,20,21,22,23
    #print "len",len(params),"line",line
    attackNodeNum = params[0]
    fromHop = params[2]
    toHop = params[3]
    type = params[4]
    dist = params[5]
    passThrough = params[6]
    srcIsSpoofed = params[19]
    destIsSpoofed = params[20]
    hopsToSpoofed = params[21]
    duringLinkLost = params[22]

#    afterLinkLost = params[22]
    attackName = params[24]
    attackerCloserToDestThanSpoofed = params[25]

    if "spoof" in attackName:
             attackName = "spoofingAttack"+attackName.split(".")[3].strip()+"_sh" 
    else:
        attackName = "forwardingAttack_sh"
    configName = attackNodeNum+"_60_60_"+attackName+"_jaime_scen_"+protocol+"_"+scenFile+"_txt"
    isForwarding = "no"
    if "forwarding" in attackName:
        isForwarding = "yes"
    if(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed) not in uniques:
        uniques[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)] = [duringLinkLost]
        
        conflictConfigs[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)] = [(configName,duringLinkLost)]
        #print "uniques size",len(uniques),"conflicts size",len(conflictConfigs) 
        #now check if it's the same value:
    else:
        if duringLinkLost not in uniques[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)]:
#           print "uniques",uniques
#           print "appending line:",lineNum,"vals:", fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,duringLinkLost
            uniques[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)].append(duringLinkLost)
            conflictConfigs[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)].append((configName,duringLinkLost))
        #if it is in there and there is no conflict, then check if there has been a conflict, is yes, then add it.
        else:
            if len(uniques[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)]) > 1:                
                uniques[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)].append(duringLinkLost)
                conflictConfigs[(fromHop,toHop,type,dist,passThrough,srcIsSpoofed,destIsSpoofed,hopsToSpoofed,isForwarding,attackerCloserToDestThanSpoofed)].append((configName,duringLinkLost))
                    
#do the ones that are not the majority
configsToDo = {}

for item in conflictConfigs:
    if len(conflictConfigs[item]) > 1:
        #count number of falses and trues
        numFalses = 0
        numTrues = 0
        todo = "both"
        for subitem in conflictConfigs[item]:
            if subitem[1] == "true":
                numTrues +=1
            else:
                numFalses +=1
        if numTrues > numFalses:
            todo = "false"
        elif numTrues < numFalses:
            todo = "true"
        else: todo = "both"
        
        for subitem in conflictConfigs[item]:
            if subitem[1] == todo or todo == "both":
                configsToDo[subitem[0]] = (numTrues,numFalses)  
print "#!/bin/bash"

for item in configsToDo:
    print "rm ./"+item+" -rf"

for item in uniques:
    if len(uniques[item]) > 1:
        print item,uniques[item]
print len(configsToDo)
for item in configsToDo:
    print item,configsToDo[item]

#do the ones that are evenly split
#print "Found",numConflicts,"conflicts among ",len(configConflictCounts),"configs,",numRedo,"are above",minForRedo
