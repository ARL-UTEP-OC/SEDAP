import sys

#A tree class to hold the nested if statements:
class Tree(object):
    def __init__(self):
		self.children = []
		self.parent = None
		self.stmt = None

def printMe(rootElement):
	if rootElement.stmt != None:
		print rootElement.stmt
	if len(rootElement.children) > 0:
		for child in rootElement.children:
			printMe(child)

def printLogical(rootElement):
	if rootElement.stmt != None:
		print rootElement.stmt
	if len(rootElement.children) > 0:
		for child in rootElement.children:
			printMe(child)

#read the input and initialize the tree
rules = open(sys.argv[1])
root = Tree()
currDepth = 0
currRoot = root

for line in rules:
	#first get the depth of the current line:
	depth = len(line.split('|'))
	depthDist = depth - currDepth
	t = Tree()
	if depthDist >= 0:
		#print "Moving deeper: ",line
		currRoot.children.append(t)
		t.parent = currRoot
		t.stmt = line
		for i in range(0,depthDist):
			currRoot = t
	elif depthDist < 0:
		#print "Moving upper: ",line
		levelsUp = depthDist*-1
		for i in range(0,levelsUp):
			currRoot = currRoot.parent
		currRoot.children.append(t)
		t.parent = currRoot
		t.stmt = line
	currDepth = depth

print "-------------final tree----------"
printMe(root)
#print root.children


"""
class IPM(object):
      
    def __init__(self):
        pass
    
    def evaluate(self, att):
 
"""
